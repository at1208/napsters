{
  "data":[
    { "url":"/injection",
      "name":"Injection",
      "title":"Injection Vulnerabilty",
      "content":"Our targets will all be exploited by attacking well-understood vulnerabilities. Although there are several other web-related vulnerabilities, these are the ones we are going to concentrate on as we work through the chapters.njection flaws occur when untrusted user data are sent to the web application as part of a command or query. The attacker’s hostile data can trick the web application into executing unintended commands or accessing unauthorized data. Injection occurs when a hacker feeds.This is one of the oldest attacks against web applications, but it’s still the king of the vulnerabilities because it is still widespread and very damaging.Injection vulnerabilities can pop up in all sorts of places within the web application that allow the user to provide malicious input. Some of the most common injection attacks target the following functionalityAnytime that the user’s input is accepted by the web application and processed without the appropriate sanitization, injection may occur. This means that the hacker can influence how the web application’s queries and commands are constructed and what data should be included in the results. This is a very powerful exploit!.Cross-site Scripting (XSS)occurs when user input is accepted by the application as part of a request and then is used in the output of the response without proper output encoding in place for validation and sanitization. XSS allows attackers to execute scripts in the victim’s browser, XSS comes in two primary “flavors”: reflected and stored. Reflected XSS is much more widespread in web applications and is considered to be less harmful. The reason that reflected XSS is considered less harmful isn’t because of what it can do, but because it’s a one-time attack where the payload sent in a reflected XSS attack is only valid on that one request. Think of reflected XSS as “whoever clicks it, gets it.” Whatever user clicks the link that contains the malicious script will be the only person directly affected by this attack. It is generally a 1:1 hacker to victim ratio. The hacker may send out the same malicious URL to millions of potential victims, but only the ones that click his link are going to be affected and there’s no connection between compromised users.Stored XSS is harder to find in web applications, but it’s much more damaging because it persists across multiple requests and can exploit numerous users with one attack. This occurs when a hacker is able to inject the malicious script into the application and have it be available to all visiting users. It may be placed in a database that is used to populate a webpage or in a user forum that displays messages or any other mechanism that stores input. As legitimate users request the page, the XSS exploit will run in each of their browsers. This is a 1:many hacker to victim ratio."
    },
    {
      "url":"/broken-authentication",
      "name":"Broken Authentication",
      "title":"Broken Authentication Vulnerabilty",
      "content":"Broken authentication is an umbrella term for several vulnerabilities that attackers exploit to impersonate legitimate users online. Broadly, broken authentication refers to weaknesses in two areas: session management and credential management. Both are classified as broken authentication because attackers can use either avenue to masquerade as a user: hijacked session IDs or stolen login credentials.Attackers employ a wide variety of strategies to take advantage of these weaknesses, ranging from huge credential stuffing attacks to highly targeted schemes aimed at gaining access to a specific person’s credentials.In recent years, broken authentication attacks have accounted for many of the worst data breaches, and security experts sound the alarm about this underrecognized threat. The Open Web Application Security Project (OWASP) has included it in its “Top 10” list of the biggest web application security risks since 2017. By 2020, broken authentication had climbed to the number two spot.Session management is part of broken authentication, but the two terms are often listed side by side so people don't assume that “authentication” refers only to usernames and passwords. Since web applications use sessions and credentials to identify individual users, attackers can impersonate them using either mechanism.A web session is a sequence of network transactions associated to the same user within a period of time. Let’s say you go to a social media website and browse for a while before logging in to your account. You find an interesting post where you want to comment, which requires you to log in. Once you leave a few comments, you log out and close the web browser window or tab. Everything you did from the moment you arrived to the website was a session. Web applications can track sessions before and after authentication.Web applications issue every user a unique session ID for each visit, which allows the web app to communicate with the user as they move through the site. These session IDs commonly take the form of cookies and URL parameters.Session management concerns how you define the parameters of that session. For instance, how long can a session last before you automatically log a user out? How do you issue and revoke session IDs? How securely are they linked to a user’s IP address?"
    },
    {
      "url":"/sensitive-data-exposure",
      "name":"Sensitive Data Exposure",
      "title":"Sensitive Data Exposure Vulnerabilty",
      "content":"Any industry that collects, stores, or processes sensitive data is at risk for a data breach. In 2020, the average cost of a data breach is estimated to cost $3.86 million to contain, as a result of both direct and indirect costs. Lack of protection and inability to comply with laws, spot vulnerabilities, and provide proper protection of data could put companies in danger of a massive breach. This, in turn, places them at risk for hefty penalties or closures.Sensitive data is any information that is meant to be protected from unauthorized access. Sensitive data can include anything from personally identifiable information (PII), such as Social Security numbers, to banking information, to login credentials. When this data is accessed by an attacker as a result of a data breach, users are at risk for sensitive data exposure. Data breaches that result in the exposure of sensitive credentials can come with costs in the millions of dollars, destroying a companys reputation along with it. During the 21st century, the use of mobile devices has increased internet usage dramatically. As a result, banks, hospitals, retail, and many other industries have made it their mission to create a user-friendly and efficient online presence, one which applications have improved dramatically.Attackers target applications with vulnerabilities that leave sensitive data unprotected. Today, data breaches are common and pose a bigger threat than ever as legacy application security falls far behind advanced attack techniques used to exploit application vulnerabilities.Data exposure has become a term recognized around the world. Billions of people are at risk for sensitive data exposure, which should leave security at the top of the list of deployment priorities. This, however, is not the case, as developers rush to meet the demands brought on by the push to digital conversion. Attackers know fast-paced development cycles are prone to vulnerabilities, targeting those that they can exploit in an application attack. Two of the largest breaches in the past century affected nearly 3.5 billion people, the largest of which went unnoticed for three years.The largest instance of sensitive data exposure to date impacted 3 billion user accounts. The Yahoo! data breach started in 2013, resulting in hackers gathering 1 billion user credentials, including their email addresses, passwords, and security questions and answers. A different set of hackers targeted Yahoo! in 2014, this time affecting 500 million users. Both events were not announced until 2016, three years after the original breach. After all was said and done, 3 billion accounts were compromised and customer confidence sank, dropping the company value by millions."
    },
    {
      "url":"/xml-external-entities",
      "name":"Xml External Entities",
      "title":"Xml External Entities Vulnerabilty",
      "content":"According to OWASP, “An XML External Entity attack is a type of attack against an application that parses XML input. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. This attack may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the perspective of the machine where the parser is located, and other system impacts.”Applications and in particular XML-based web services or downstream integrations might be vulnerable to attack if:The application accepts XML directly or XML uploads, especially from untrusted sources, or inserts untrusted data into XML documents, which is then parsed by an XML processor.Any of the XML processors in the application or SOAP based web services has document type definitions (DTDs) enabled. As the exact mechanism for disabling DTD processing varies by processor, it is good practice to consult a reference such as the OWASP Cheat Sheet 'XXE Prevention’.If your application uses SAML for identity processing within federated security or single sign on (SSO) purposes. SAML uses XML for identity assertions, and may be vulnerable.If the application uses SOAP prior to version 1.2, it is likely susceptible to XXE attacks if XML entities are being passed to the SOAP framework.Being vulnerable to XXE attacks likely means that the application is vulnerable to denial of service attacks including the Billion Laughs attack."
    },
    {
      "url":"/broken-access-control",
      "name":"Broken Access Control",
      "title":"Broken Access Control Vulnerabilty",
      "content":"In this article we cover examples of broken access control, how to find it in your application and possible consequences.Access control, or authorization, is how a web application grants access to resources to some users, and not others. These resources mostly fall into two categories: sensitive data, which should only be accessed by certain entities, and functions that can modify data on the webserver, or even modify the server’s functionality. Authorization checks are performed after authentication: when a user visits a webpage, first they have to authenticate themselves, i.e. log in, then if they try to gain access to a resource, the server checks if they are authorized to do so.nsecure ID’sWhen looking for something in a database, most of the time we use a unique ID. Often, this ID is used in the URL to identify what data the user wants to get. Let’s say I’m logged in to a website, and my user ID is 1337. When I go to my own profile page, the URL looks something like this: https://example.com/profile?id=1337. This page might contain sensitive data, which nobody else should see. But what if I replace the ID with another user’s ID? If the webserver is configured improperly, then if I visit e.g. https://example.com/profile?id=42, then I will get the profile page of another user, with every sensitive data. You might ask how do I know the ID of another user? Well, if the user IDs are random and kept secret, then it’s a bit harder, but this is not nearly enough defense. This is a good example of ‘security by obscurity’, which is widely considered bad practice. The good solution is to implement proper access control in the server, so it does not serve the user with the requested data if they are not authorized to access it.Forced browsingForced browsing is when the user tries to access resources that are not referenced by the application, but still available. For example, a web application might have an admin page, but there is no link to the admin page on other parts of the website, so just by clicking around, a regular user never gets to the admin page. But if someone directly edits the URL, e.g. visit https://example.com/admin, they might access the admin page if the access control is broken.Directory traversalWhen a website stores data in different files, the server might expect a filename as a request parameter. E.g. if there is a web application for reading short novels, the URL might look like this: https://example.com/novels?file=novel1.txt. On the server side, there is probably a folder where all novels are stored, and the server looks for the given file name in this folder. An attacker could abuse this behaviour for example by visiting the URL https://example.com/novels?file=../../../../../../etc/passwd. The lots of ../-s will eventually reach the root directory, and the attacker can access any file from there. In order to defend against this attack, the webserver should be configured in such way that it has no access to the files that it does not need. Filtering for .. in the input parameter could also work."
    },
    {
      "url":"/security-misconfiguration",
        "name":"Security Misconfiguration",
      "title":"Security Misconfiguration Vulnerabilty",
      "content":"Misconfigurations are often seen as an easy target, as it can be easy to detect on misconfigured web servers, cloud and applications and then becomes exploitable, causing significant harm and leading to catastrophic data leakage issues for enterprises like the 2019 Teletext exposure of 530,000 data files which was caused by an insecurely configured Amazon Web Service (AWS) web server.Security misconfigurations arise when security settings are not defined, implemented, and default values are maintained. Usually, this means the configuration settings do not comply with the industry security standards (CIS benchmarks, OWASP Top 10 etc) which are critical to maintaining security and reduce business risk. Misconfiguration normally happens when a system or database administrator or developer does not properly configure the security framework of an application, website, desktop, or server leading to dangerous open pathways for hackers.Misconfigurations are often seen as an easy target, as it can be easy to detect on misconfigured web servers, cloud and applications and then becomes exploitable, causing significant harm and leading to catastrophic data leakage issues for enterprises like the 2019 Teletext exposure of 530,000 data files which was caused by an insecurely configured Amazon Web Service (AWS) web server. Unfortunately, once a system falls prey to a vulnerability or lack of security safeguarding, your sensitive data is at risk of getting stolen or altered. Often, the biggest problem organizations face is that these flaws are not being identified or addressed early enough in accordance with security hygiene best practice. This is becoming a widespread security challenge, with misconfiguration accounting for 82% of security vulnerabilities and we’ve been seeing high profile stories around this topic in the industry press for a number of years. Including the exposure of 750,000 birth certificate applications in the US on an AWS storage bucket in 2019 and another misconfigured cloud storage bucket exposing hundreds of thousands of mobile phone bills for AT&T, Verizon and T-Mobile subscribers due to human error and misconfiguration.As the examples show, many enterprises are migrating their services to the cloud, because of digital transformation and stretching networks to the fullest due to the Covid-19 pandemic to support remote working, however its harmful in the long term to forget the basics. It appears vital security safeguarding is being bypassed around configuration of web apps, networks and cloud, whether due to speed, misunderstanding or simple human error. In this blog we will shed some light on the types of misconfigurations to look out for and importantly - how to combat them with security awareness and regular vulnerability assessments."
    },
    {
      "url":"/cross-site-scripting",
      "name":"Cross Site Scripting",
      "title":"Cross Site Scripting Vulnerabilty",
      "content":"Cross-site Scripting (XSS) is a client-side code injection attack. The attacker aims to execute malicious scripts in a web browser of the victim by including malicious code in a legitimate web page or web application. The actual attack occurs when the victim visits the web page or web application that executes the malicious code. The web page or web application becomes a vehicle to deliver the malicious script to the user’s browser. Vulnerable vehicles that are commonly used for Cross-site Scripting attacks are forums, message boards, and web pages that allow comments.A web page or web application is vulnerable to XSS if it uses unsanitized user input in the output that it generates. This user input must then be parsed by the victim’s browser. XSS attacks are possible in VBScript, ActiveX, Flash, and even CSS. However, they are most common in JavaScript, primarily because JavaScript is fundamental to most browsing experiences.If an attacker can abuse an XSS vulnerability on a web page to execute arbitrary JavaScript in a user’s browser, the security of that vulnerable website or vulnerable web application and its users has been compromised. XSS is not the user’s problem like any other security vulnerability. If it is affecting your users, it affects you.Cross-site Scripting may also be used to deface a website instead of targeting the user. The attacker can use injected scripts to change the content of the website or even redirect the browser to another web page, for example, one that contains malicious code.XSS vulnerabilities are perceived as less dangerous than for example SQL Injection vulnerabilities. Consequences of the ability to execute JavaScript on a web page may not seem dire at first. Most web browsers run JavaScript in a very tightly controlled environment. JavaScript has limited access to the user’s operating system and the user’s files. However, JavaScript can still be dangerous if misused as part of malicious content:Malicious JavaScript has access to all the objects that the rest of the web page has access to. This includes access to the user’s cookies. Cookies are often used to store session tokens. If an attacker can obtain a user’s session cookie, they can impersonate that user, perform actions on behalf of the user, and gain access to the user’s sensitive data.JavaScript can read the browser DOM and make arbitrary modifications to it. Luckily, this is only possible within the page where JavaScript is running.JavaScript can use the XMLHttpRequest object to send HTTP requests with arbitrary content to arbitrary destinations.JavaScript in modern browsers can use HTML5 APIs. For example, it can gain access to the user’s geolocation, webcam, microphone, and even specific files from the user’s file system. Most of these APIs require user opt-in, but the attacker can use social engineering to go around that limitation."
    },
    {
      "url":"/insecure-deserialization",
        "name":"Insecure Deserialization",
      "title":"Insecure Deserialization Vulnerabilty",
      "content":"In this section, we'll cover what insecure deserialization is and describe how it can potentially expose websites to high-severity attacks. We'll highlight typical scenarios and demonstrate some widely applicable techniques using concrete examples of PHP, Ruby, and Java deserialization. We'll also look at some ways that you can avoid insecure deserialization vulnerabilities in your own websites.Exploiting insecure deserialization has a reputation for being difficult. However, it can sometimes be much simpler than you might think. If you're new to the topic of deserialization, this section contains key background information that you should familiarize yourself with first. If you already know the the basics of deserialization, you can skip straight to learning about how to exploit it.Deserialization is the process of restoring this byte stream to a fully functional replica of the original object, in the exact state as when it was serialized. The website's logic can then interact with this deserialized object, just like it would with any other object.Many programming languages offer native support for serialization. Exactly how objects are serialized depends on the language. Some languages serialize objects into binary formats, whereas others use different string formats, with varying degrees of human readability. Note that all of the original objects attributes are stored in the serialized data stream, including any private fields. To prevent a field from being serialized, it must be explicitly marked as transient in the class declaration.Insecure deserialization is when user-controllable data is deserialized by a website. This potentially enables an attacker to manipulate serialized objects in order to pass harmful data into the application code.It is even possible to replace a serialized object with an object of an entirely different class. Alarmingly, objects of any class that is available to the website will be deserialized and instantiated, regardless of which class was expected. For this reason, insecure deserialization is sometimes known as an object injection vulnerability."
    },
    {
      "url":"/insufficient-login-and-monitoring",
        "name":"Insufficient Login And Monitoring",
      "title":"Insufficient Login And Monitoring Vulnerabilty",
      "content":"Insufficient Logging and Monitoring is one of the categories on OWASP‘s Top 10 list and covers the lack of best practices that should be in place to prevent or damage control security breaches. A proof of concept video follows this article. OWASP is a non-profit organization with the goal of improving the security of software and the internet. We cover their list of the ten most common vulnerabilities one by one in our OWASP Top 10 blog series. Rather than being a vulnerability in itself, Insufficient logging and Monitoring is an OWASP category that covers the lack of various best practices that could in turn prevent or damage control security breaches.The category includes everything from unlogged events, logs that are not stored properly and warnings where no action is taken within reasonable time.When OWASP made this a top 10 vulnerability, the category became part of the list based on a industry survey rather than quantifiable data, so it is unclear how many systems are affected. However, there are always improvements to be made, and logging and monitoring is something that everyone should always have in mind.In 2016, the average detection rate for an attack was 191 days. Had the breaches been detected earlier the impact could be drastically minimised.With that said, Yahoo would be a good example of what happens when a breach is not made public in time. In September 2016, the company reported a breach from 2014 affecting 500 million users. A few months later, in December, Yahoo reported another breach, this time from august 2013, affecting over a billion users. Information about the latter breach was later corrected, with the number of affected users being updated to three billion users.From an outsider perspective, Insufficient Logging and Monitoring is really hard to detect. The logs should only be exposed internally, so whether or not logging and monitoring best practices are implemented is not something an outsider can determine."
    }
  ]
}
